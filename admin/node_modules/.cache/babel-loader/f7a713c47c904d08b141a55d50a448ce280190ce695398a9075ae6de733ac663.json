{"ast":null,"code":"/**\n * SessionController class for managing session data using sessionStorage.\n */\nexport class SessionController {\n  /**\n   * Create a new instance of SessionController.\n   * @constructor\n   * @param {Object} options - Optional configuration options.\n   */\n  constructor() {\n    let {\n      test = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    /**\n     * Add an item to the session.\n     * @param {object} item - The item to be added to the session\n     * @param {any} title - The session title\n     * .\n     */\n    this.add = _ref => {\n      let {\n        title,\n        item\n      } = _ref;\n      this.checkSession();\n      let session = JSON.parse(sessionStorage.getItem(\"session\"));\n\n      // Check if title already exists in session\n      if (session.includes(title)) {\n        this.update({\n          title: title,\n          item: item\n        });\n        return; // Exit the function if title already exists\n      }\n\n      // Add item to the session array\n      session.push(title);\n\n      // Update session data in sessionStorage\n      sessionStorage.setItem(\"session\", JSON.stringify(session));\n\n      // Store item separately in sessionStorage using its value as the key\n      if (typeof item === 'object') {\n        sessionStorage.setItem(title, JSON.stringify(item));\n      } else {\n        sessionStorage.setItem(title, item);\n      }\n    };\n    /**\n     * Update the value of a specific item in the session.\n     * @param {any} item - The item to be updated in the session.\n     */\n    this.update = _ref2 => {\n      let {\n        title,\n        item\n      } = _ref2;\n      let session = JSON.parse(sessionStorage.getItem(\"session\"));\n      //console.log(session);\n\n      // Find the matching item in the session array\n      const matchingItem = session.find(it => it === title);\n      if (matchingItem) {\n        // Update the value of the item in sessionStorage\n        sessionStorage.setItem(title, JSON.stringify(item));\n      } else {\n        // Handle the case when no matching item is found\n        this.add({\n          title: title,\n          item: item\n        });\n      }\n    };\n    /**\n     * Get the value of a specific item in the session.\n     * @param {string} item - The key of the item to retrieve.\n     * @returns {any} The value of the requested item.\n     */\n    this.get = _ref3 => {\n      let {\n        item\n      } = _ref3;\n      try {\n        return JSON.parse(sessionStorage.getItem(item));\n      } catch (error) {\n        //console.log(error);\n        return sessionStorage.getItem(item);\n      }\n    };\n    /**\n     * Show all items in the session.\n     */\n    this.show = () => {\n      const session = JSON.parse(sessionStorage.getItem(\"session\"));\n      var count = 0;\n      if (Array.isArray(session)) {\n        session.forEach(item => {\n          count += 1;\n          const value = sessionStorage.getItem(item);\n          console.log(count, item, value);\n        });\n      }\n    };\n    /**\n     * Clear the session by removing all items\n     */\n    this.clear = () => {\n      let session = JSON.parse(sessionStorage.getItem(\"session\"));\n\n      // Remove each item from sessionStorage\n      session.forEach(item => {\n        sessionStorage.removeItem(item);\n      });\n\n      // Clear the session array from sessionStorage\n      sessionStorage.removeItem(\"session\");\n      console.log(\"remove session done!\");\n    };\n    this.test = test;\n\n    // 物件宣告\n    this.checkSession();\n    //監聽\n    this._listener();\n  }\n  checkSession() {\n    let session = JSON.parse(sessionStorage.getItem(\"session\"));\n    if (this.test) {\n      console.log(\"Session\", session);\n    }\n    if (session === undefined || session === null) {\n      session = [];\n      sessionStorage.setItem(\"session\", JSON.stringify(session));\n    }\n  }\n  _listener() {\n    // const self = this;\n    // $('#logout').on(\"click\", function () {\n    //     self.clear();\n    // });\n  }\n  // refresh = () => {\n  //     fetch.GET(\"/user/save_session/\");\n  // }\n  setSessionItemWithExpiry(_ref4) {\n    let {\n      title,\n      item,\n      hour\n    } = _ref4;\n    const expirationMs = hour * 60 * 60 * 1000;\n    const expirationTime = Date.now() + expirationMs;\n    const data = {\n      item: item,\n      expiresAt: expirationTime\n    };\n    this.checkSession();\n    let session = JSON.parse(sessionStorage.getItem(\"session\"));\n    if (!Array.isArray(session)) {\n      session = [];\n    }\n    if (session.includes(title)) {\n      return;\n    }\n    session.push(title);\n    sessionStorage.setItem(\"session\", JSON.stringify(session));\n    sessionStorage.setItem(title, JSON.stringify(data));\n  }\n  isSessionItemExpired(_ref5) {\n    let {\n      title\n    } = _ref5;\n    const sessionData = sessionStorage.getItem(title);\n    if (sessionData) {\n      const data = JSON.parse(sessionData);\n      const currentTime = Date.now();\n      return currentTime > data.expiresAt;\n    }\n\n    // null\n    return null;\n  }\n}","map":{"version":3,"names":["SessionController","constructor","test","arguments","length","undefined","add","_ref","title","item","checkSession","session","JSON","parse","sessionStorage","getItem","includes","update","push","setItem","stringify","_ref2","matchingItem","find","it","get","_ref3","error","show","count","Array","isArray","forEach","value","console","log","clear","removeItem","_listener","setSessionItemWithExpiry","_ref4","hour","expirationMs","expirationTime","Date","now","data","expiresAt","isSessionItemExpired","_ref5","sessionData","currentTime"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/food/front/admin/src/lib/NativeJs/session.js"],"sourcesContent":["\n/**\n * SessionController class for managing session data using sessionStorage.\n */\nexport class SessionController {\n    /**\n     * Create a new instance of SessionController.\n     * @constructor\n     * @param {Object} options - Optional configuration options.\n     */\n    constructor({ test = false } = {}) {\n        this.test = test;\n\n        // 物件宣告\n        this.checkSession()\n        //監聽\n        this._listener();\n    }\n\n    checkSession() {\n\n        let session = JSON.parse(sessionStorage.getItem(\"session\"));\n\n        if (this.test) {\n            console.log(\"Session\", session);\n        }\n\n        if (session === undefined || session === null) {\n            session = [];\n            sessionStorage.setItem(\"session\", JSON.stringify(session));\n        }\n\n    }\n\n    _listener() {\n        // const self = this;\n        // $('#logout').on(\"click\", function () {\n        //     self.clear();\n        // });\n    }\n\n    /**\n     * Add an item to the session.\n     * @param {object} item - The item to be added to the session\n     * @param {any} title - The session title\n     * .\n     */\n    add = ({ title, item }) => {\n        this.checkSession();\n        let session = JSON.parse(sessionStorage.getItem(\"session\"));\n\n        // Check if title already exists in session\n        if (session.includes(title)) {\n            this.update({ title: title, item: item });\n            return; // Exit the function if title already exists\n        }\n\n        // Add item to the session array\n        session.push(title);\n\n        // Update session data in sessionStorage\n        sessionStorage.setItem(\"session\", JSON.stringify(session));\n\n        // Store item separately in sessionStorage using its value as the key\n        if (typeof item === 'object') {\n            sessionStorage.setItem(title, JSON.stringify(item));\n        } else {\n            sessionStorage.setItem(title, item);\n        }\n    }\n\n\n    /**\n     * Update the value of a specific item in the session.\n     * @param {any} item - The item to be updated in the session.\n     */\n    update = ({ title, item }) => {\n        let session = JSON.parse(sessionStorage.getItem(\"session\"));\n        //console.log(session);\n\n        // Find the matching item in the session array\n        const matchingItem = session.find((it) => it === title);\n\n        if (matchingItem) {\n            // Update the value of the item in sessionStorage\n            sessionStorage.setItem(title, JSON.stringify(item));\n        } else {\n            // Handle the case when no matching item is found\n            this.add({ title: title, item: item });\n        }\n    };\n\n\n\n    /**\n     * Get the value of a specific item in the session.\n     * @param {string} item - The key of the item to retrieve.\n     * @returns {any} The value of the requested item.\n     */\n    get = ({ item }) => {\n        try {\n            return JSON.parse(sessionStorage.getItem(item));\n        } catch (error) {\n            //console.log(error);\n            return sessionStorage.getItem(item)\n        }\n    }\n\n    /**\n     * Show all items in the session.\n     */\n    show = () => {\n        const session = JSON.parse(sessionStorage.getItem(\"session\"));\n        var count = 0;\n        if (Array.isArray(session)) {\n            session.forEach((item) => {\n                count += 1;\n                const value = sessionStorage.getItem(item);\n                console.log(count, item, value);\n            });\n        }\n    }\n\n\n\n    /**\n     * Clear the session by removing all items\n     */\n    clear = () => {\n        let session = JSON.parse(sessionStorage.getItem(\"session\"));\n\n        // Remove each item from sessionStorage\n        session.forEach((item) => {\n            sessionStorage.removeItem(item);\n        });\n\n        // Clear the session array from sessionStorage\n        sessionStorage.removeItem(\"session\");\n        console.log(\"remove session done!\")\n    }\n\n    // refresh = () => {\n    //     fetch.GET(\"/user/save_session/\");\n    // }\n\n    setSessionItemWithExpiry({ title, item, hour }) {\n        const expirationMs = hour * 60 * 60 * 1000;\n        const expirationTime = Date.now() + expirationMs;\n        const data = {\n            item: item,\n            expiresAt: expirationTime\n        };\n\n        this.checkSession();\n\n        let session = JSON.parse(sessionStorage.getItem(\"session\"));\n\n        if (!Array.isArray(session)) {\n            session = [];\n        }\n\n        if (session.includes(title)) {\n            return;\n        }\n\n        session.push(title);\n\n        sessionStorage.setItem(\"session\", JSON.stringify(session));\n\n        sessionStorage.setItem(title, JSON.stringify(data));\n    }\n\n    isSessionItemExpired({ title }) {\n        const sessionData = sessionStorage.getItem(title);\n\n        if (sessionData) {\n            const data = JSON.parse(sessionData);\n            const currentTime = Date.now();\n\n            return currentTime > data.expiresAt;\n        }\n\n        // null\n        return null;\n    }\n}\n\n"],"mappings":"AACA;AACA;AACA;AACA,OAAO,MAAMA,iBAAiB,CAAC;EAC3B;AACJ;AACA;AACA;AACA;EACIC,WAAWA,CAAA,EAAwB;IAAA,IAAvB;MAAEC,IAAI,GAAG;IAAM,CAAC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IA+BjC;AACJ;AACA;AACA;AACA;AACA;IALI,KAMAG,GAAG,GAAGC,IAAA,IAAqB;MAAA,IAApB;QAAEC,KAAK;QAAEC;MAAK,CAAC,GAAAF,IAAA;MAClB,IAAI,CAACG,YAAY,CAAC,CAAC;MACnB,IAAIC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC;;MAE3D;MACA,IAAIJ,OAAO,CAACK,QAAQ,CAACR,KAAK,CAAC,EAAE;QACzB,IAAI,CAACS,MAAM,CAAC;UAAET,KAAK,EAAEA,KAAK;UAAEC,IAAI,EAAEA;QAAK,CAAC,CAAC;QACzC,OAAO,CAAC;MACZ;;MAEA;MACAE,OAAO,CAACO,IAAI,CAACV,KAAK,CAAC;;MAEnB;MACAM,cAAc,CAACK,OAAO,CAAC,SAAS,EAAEP,IAAI,CAACQ,SAAS,CAACT,OAAO,CAAC,CAAC;;MAE1D;MACA,IAAI,OAAOF,IAAI,KAAK,QAAQ,EAAE;QAC1BK,cAAc,CAACK,OAAO,CAACX,KAAK,EAAEI,IAAI,CAACQ,SAAS,CAACX,IAAI,CAAC,CAAC;MACvD,CAAC,MAAM;QACHK,cAAc,CAACK,OAAO,CAACX,KAAK,EAAEC,IAAI,CAAC;MACvC;IACJ,CAAC;IAGD;AACJ;AACA;AACA;IAHI,KAIAQ,MAAM,GAAGI,KAAA,IAAqB;MAAA,IAApB;QAAEb,KAAK;QAAEC;MAAK,CAAC,GAAAY,KAAA;MACrB,IAAIV,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC;MAC3D;;MAEA;MACA,MAAMO,YAAY,GAAGX,OAAO,CAACY,IAAI,CAAEC,EAAE,IAAKA,EAAE,KAAKhB,KAAK,CAAC;MAEvD,IAAIc,YAAY,EAAE;QACd;QACAR,cAAc,CAACK,OAAO,CAACX,KAAK,EAAEI,IAAI,CAACQ,SAAS,CAACX,IAAI,CAAC,CAAC;MACvD,CAAC,MAAM;QACH;QACA,IAAI,CAACH,GAAG,CAAC;UAAEE,KAAK,EAAEA,KAAK;UAAEC,IAAI,EAAEA;QAAK,CAAC,CAAC;MAC1C;IACJ,CAAC;IAID;AACJ;AACA;AACA;AACA;IAJI,KAKAgB,GAAG,GAAGC,KAAA,IAAc;MAAA,IAAb;QAAEjB;MAAK,CAAC,GAAAiB,KAAA;MACX,IAAI;QACA,OAAOd,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAACN,IAAI,CAAC,CAAC;MACnD,CAAC,CAAC,OAAOkB,KAAK,EAAE;QACZ;QACA,OAAOb,cAAc,CAACC,OAAO,CAACN,IAAI,CAAC;MACvC;IACJ,CAAC;IAED;AACJ;AACA;IAFI,KAGAmB,IAAI,GAAG,MAAM;MACT,MAAMjB,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC;MAC7D,IAAIc,KAAK,GAAG,CAAC;MACb,IAAIC,KAAK,CAACC,OAAO,CAACpB,OAAO,CAAC,EAAE;QACxBA,OAAO,CAACqB,OAAO,CAAEvB,IAAI,IAAK;UACtBoB,KAAK,IAAI,CAAC;UACV,MAAMI,KAAK,GAAGnB,cAAc,CAACC,OAAO,CAACN,IAAI,CAAC;UAC1CyB,OAAO,CAACC,GAAG,CAACN,KAAK,EAAEpB,IAAI,EAAEwB,KAAK,CAAC;QACnC,CAAC,CAAC;MACN;IACJ,CAAC;IAID;AACJ;AACA;IAFI,KAGAG,KAAK,GAAG,MAAM;MACV,IAAIzB,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC;;MAE3D;MACAJ,OAAO,CAACqB,OAAO,CAAEvB,IAAI,IAAK;QACtBK,cAAc,CAACuB,UAAU,CAAC5B,IAAI,CAAC;MACnC,CAAC,CAAC;;MAEF;MACAK,cAAc,CAACuB,UAAU,CAAC,SAAS,CAAC;MACpCH,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACvC,CAAC;IAhIG,IAAI,CAACjC,IAAI,GAAGA,IAAI;;IAEhB;IACA,IAAI,CAACQ,YAAY,CAAC,CAAC;IACnB;IACA,IAAI,CAAC4B,SAAS,CAAC,CAAC;EACpB;EAEA5B,YAAYA,CAAA,EAAG;IAEX,IAAIC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC;IAE3D,IAAI,IAAI,CAACb,IAAI,EAAE;MACXgC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAExB,OAAO,CAAC;IACnC;IAEA,IAAIA,OAAO,KAAKN,SAAS,IAAIM,OAAO,KAAK,IAAI,EAAE;MAC3CA,OAAO,GAAG,EAAE;MACZG,cAAc,CAACK,OAAO,CAAC,SAAS,EAAEP,IAAI,CAACQ,SAAS,CAACT,OAAO,CAAC,CAAC;IAC9D;EAEJ;EAEA2B,SAASA,CAAA,EAAG;IACR;IACA;IACA;IACA;EAAA;EAuGJ;EACA;EACA;EAEAC,wBAAwBA,CAAAC,KAAA,EAAwB;IAAA,IAAvB;MAAEhC,KAAK;MAAEC,IAAI;MAAEgC;IAAK,CAAC,GAAAD,KAAA;IAC1C,MAAME,YAAY,GAAGD,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;IAC1C,MAAME,cAAc,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGH,YAAY;IAChD,MAAMI,IAAI,GAAG;MACTrC,IAAI,EAAEA,IAAI;MACVsC,SAAS,EAAEJ;IACf,CAAC;IAED,IAAI,CAACjC,YAAY,CAAC,CAAC;IAEnB,IAAIC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC;IAE3D,IAAI,CAACe,KAAK,CAACC,OAAO,CAACpB,OAAO,CAAC,EAAE;MACzBA,OAAO,GAAG,EAAE;IAChB;IAEA,IAAIA,OAAO,CAACK,QAAQ,CAACR,KAAK,CAAC,EAAE;MACzB;IACJ;IAEAG,OAAO,CAACO,IAAI,CAACV,KAAK,CAAC;IAEnBM,cAAc,CAACK,OAAO,CAAC,SAAS,EAAEP,IAAI,CAACQ,SAAS,CAACT,OAAO,CAAC,CAAC;IAE1DG,cAAc,CAACK,OAAO,CAACX,KAAK,EAAEI,IAAI,CAACQ,SAAS,CAAC0B,IAAI,CAAC,CAAC;EACvD;EAEAE,oBAAoBA,CAAAC,KAAA,EAAY;IAAA,IAAX;MAAEzC;IAAM,CAAC,GAAAyC,KAAA;IAC1B,MAAMC,WAAW,GAAGpC,cAAc,CAACC,OAAO,CAACP,KAAK,CAAC;IAEjD,IAAI0C,WAAW,EAAE;MACb,MAAMJ,IAAI,GAAGlC,IAAI,CAACC,KAAK,CAACqC,WAAW,CAAC;MACpC,MAAMC,WAAW,GAAGP,IAAI,CAACC,GAAG,CAAC,CAAC;MAE9B,OAAOM,WAAW,GAAGL,IAAI,CAACC,SAAS;IACvC;;IAEA;IACA,OAAO,IAAI;EACf;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}