{"ast":null,"code":"import { SessionController } from \"./session\";\n/**\n *\n * @class Fetch class for performing HTTP requests.\n */\nexport class Fetch {\n  constructor() {\n    let {\n      traget\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.sessionController = new SessionController();\n    this.traget = traget;\n  }\n  _get_session(name) {\n    return this.sessionController.get({\n      item: name\n    });\n  }\n  _get_cookie(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n      const cookies = document.cookie.split(';');\n      for (let i = 0; i < cookies.length; i++) {\n        const cookie = cookies[i].trim();\n        if (cookie.substring(0, name.length + 1) === name + '=') {\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n          break;\n        }\n      }\n    }\n    return cookieValue;\n  }\n  /**\n  * @method GET - 发送 GET 參數\n  * @example  params = {\n                             param1: 'value1',\n                             param2: 'value2',\n                             param3: 'value3'\n                             };\n  * \n  * @param {string} target  url\n  * @param {Object} params - 参数对象\n  * @returns {Promise<Response>} - 返回包含响应数据的 Promise 对象\n  */\n  async GET(target) {\n    //console.log(target)\n    return new Promise((resolve, reject) => {\n      fetch(target).then(response => response.json()).then(data => {\n        resolve(data);\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n  async POST(_ref) {\n    let {\n      target,\n      params = null\n    } = _ref;\n    try {\n      const response = await fetch(target, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRF-Token': this._get_session('csrf_token'),\n          'sessionId': this._get_session('sessionId')\n        },\n        body: JSON.stringify(params)\n      });\n      if (!response.ok) {\n        throw new Error('Failed with status code: ' + response.status);\n      }\n      const cookies = document.cookie;\n      //console.log(cookies);\n\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      throw new Error('Request failed: ' + error.message);\n    }\n  }\n}","map":{"version":3,"names":["SessionController","Fetch","constructor","traget","arguments","length","undefined","sessionController","_get_session","name","get","item","_get_cookie","cookieValue","document","cookie","cookies","split","i","trim","substring","decodeURIComponent","GET","target","Promise","resolve","reject","fetch","then","response","json","data","catch","error","POST","_ref","params","method","headers","body","JSON","stringify","ok","Error","status","message"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/food/front/admin/src/lib/NativeJs/fetch.js"],"sourcesContent":["import { SessionController } from \"./session\";\n/**\n *\n * @class Fetch class for performing HTTP requests.\n */\nexport class Fetch {\n    constructor({ traget } = {}) {\n        this.sessionController = new SessionController();\n        this.traget = traget;\n    }\n\n    _get_session(name) {\n        return this.sessionController.get({ item: name });\n    }\n\n    _get_cookie(name) {\n        let cookieValue = null;\n        if (document.cookie && document.cookie !== '') {\n            const cookies = document.cookie.split(';');\n            for (let i = 0; i < cookies.length; i++) {\n                const cookie = cookies[i].trim();\n                if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                    break;\n                }\n            }\n        }\n        return cookieValue;\n    }\n    /**\n    * @method GET - 发送 GET 參數\n    * @example  params = {\n                               param1: 'value1',\n                               param2: 'value2',\n                               param3: 'value3'\n                               };\n    * \n    * @param {string} target  url\n    * @param {Object} params - 参数对象\n    * @returns {Promise<Response>} - 返回包含响应数据的 Promise 对象\n    */\n    async GET(target) {\n\n        //console.log(target)\n        return new Promise((resolve, reject) => {\n            fetch(target)\n                .then(response => response.json())\n                .then(data => {\n                    resolve(data);\n                })\n                .catch(error => {\n                    reject(error);\n                });\n        });\n    }\n\n    async POST({ target, params = null }) {\n\n        try {\n            const response = await fetch(target, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRF-Token': this._get_session('csrf_token'),\n                    'sessionId': this._get_session('sessionId')\n                },\n                body: JSON.stringify(params),\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed with status code: ' + response.status);\n            }\n\n\n            const cookies = document.cookie;\n            //console.log(cookies);\n\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            throw new Error('Request failed: ' + error.message);\n        }\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}